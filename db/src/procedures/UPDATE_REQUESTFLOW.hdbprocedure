PROCEDURE "UPDATE_REQUESTFLOW"(
    IN it_req_flow "COM_STRADA_VP_REQUEST_FLOW",
    OUT ev_response NVARCHAR(800)
 )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN
   /*************************************
       Write your procedure logic
   *************************************/
-- Data declarations  
DECLARE lv_sequence INTEGER;
DECLARE lv_REQUESTTYPE NVARCHAR(5);

DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        SELECT ::SQL_ERROR_MESSAGE INTO ev_response FROM DUMMY;
    END;
    
 ev_response = '';	  
/* 
UPDATE "COM_STRADA_VP_REQUEST_FLOW" A 
    SET "AGENT" = B."AGENT",
    "NEXTAGENT" = B."NEXTAGENT",
    "FORWARDSEQUENCE" =  B."FORWARDSEQUENCE",
    "MODIFIEDAT" = CURRENT_UTCTIMESTAMP,
    "WORKFLOWSEQUENCE" = B."WORKFLOWSEQUENCE",
    "STATUS_ID" =  B."STATUS_ID",
    "MODIFIEDBY" = B."MODIFIEDBY",
    "CHANGEDBYUSER" = B."CHANGEDBYUSER",
    "NOTIFICATIONAGENT" = B."NOTIFICATIONAGENT",
    "WORKFLOW_ID" = B."WORKFLOW_ID"
    FROM "COM_STRADA_VP_REQUEST_FLOW" A, :it_req_flow B 
    WHERE A."EXTERNALCODE" = B."EXTERNALCODE" AND A."REQUESTTYPE" = B."REQUESTTYPE";*/


    MERGE INTO "COM_STRADA_VP_REQUEST_FLOW" AS A
    USING :it_req_flow AS B
    ON A."EXTERNALCODE" = B."EXTERNALCODE"
    WHEN MATCHED AND A."REQUESTTYPE" =B."REQUESTTYPE" THEN UPDATE SET 
        A."AGENT" = B."AGENT",
        A."NEXTAGENT" = B."NEXTAGENT",
        A."FORWARDSEQUENCE" =  B."FORWARDSEQUENCE",
        A."MODIFIEDAT" = CURRENT_UTCTIMESTAMP,
        A."WORKFLOWSEQUENCE" = B."WORKFLOWSEQUENCE",
        A."STATUS_ID" =  B."STATUS_ID",
        A."MODIFIEDBY" = B."MODIFIEDBY",
        A."CREATEDBYUSER" = B."CREATEDBYUSER",
        A."NOTIFICATIONAGENT" = B."NOTIFICATIONAGENT",
        A."WORKFLOW_ID" = B."WORKFLOW_ID" ;  

END