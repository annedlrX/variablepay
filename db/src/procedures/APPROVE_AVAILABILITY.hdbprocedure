PROCEDURE "APPROVE_AVAILABILITY"( 
    IN it_req_flow "COM_STRADA_VP_REQUEST_FLOW",
    IN iv_additionalInfo NVARCHAR(1000) DEFAULT '',
    OUT ev_response NVARCHAR(800)
    )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN
   /*************************************
       Write your procedure logic
   *************************************/
-- Data declarations  
DECLARE lc_status_complete INTEGER := 4;
DECLARE lc_status_pendposting INTEGER := 3;
DECLARE lc_log_approved INTEGER := 6;
DECLARE lc_log_posting INTEGER := 1;
DECLARE lv_MODIFIEDBY NVARCHAR(100);
DECLARE lv_count INTEGER := 0;

DECLARE lc_infoType14 NVARCHAR(5) := 'IT14';

DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        SELECT ::SQL_ERROR_MESSAGE INTO ev_response FROM DUMMY;
    END;

ev_response = '';

CALL "UPDATE_REQUESTFLOW"(:it_req_flow,ev_response);

-- update log with request approved log:
INSERT INTO "COM_STRADA_VP_AUDIT_LOG"("ID","EXTERNALCODE","ACTION_ID",
        "CREATEDAT","CREATEDBY","REQUESTTYPE","ADDITIONALINFO","CREATEDBYUSER")
        SELECT "LOGGER".NEXTVAL,"EXTERNALCODE",
                lc_log_approved,CURRENT_UTCTIMESTAMP,"MODIFIEDBY","REQUESTTYPE",iv_additionalInfo,"CREATEDBYUSER"
                FROM :it_req_flow;
            
-- Select records which require no further processing   
lt_reqflow_complete = SELECT "EXTERNALCODE","MODIFIEDBY","REQUESTTYPE" FROM :it_req_flow 
                            WHERE "STATUS_ID" = lc_status_pendposting; 

SELECT COUNT(*) INTO lv_count FROM :lt_reqflow_complete;
IF lv_count != 0 THEN
  -- In case of no further approvals, update status of payment to 'Pending for Posting'
    /* UPDATE "COM_STRADA_VP_AVAILABILITY" A 
            SET "STATUS" = lc_status_pendposting,
                "MODIFIEDAT" = CURRENT_UTCTIMESTAMP
        FROM "COM_STRADA_VP_AVAILABILITY" A, :lt_reqflow_complete B 
            WHERE A."CUST_EXTERNALCODE" = B."EXTERNALCODE"; */


    MERGE INTO "COM_STRADA_VP_AVAILABILITY" AS A
        USING :lt_reqflow_complete AS B
        ON A."CUST_EXTERNALCODE" = B."EXTERNALCODE"
        WHEN MATCHED THEN UPDATE SET 
            A."STATUS" = lc_status_pendposting,
            A."MODIFIEDAT" = CURRENT_UTCTIMESTAMP;
       

            
 -- Update log with action Recurring pay submitted for posting
    INSERT INTO "COM_STRADA_VP_AUDIT_LOG"("ID","EXTERNALCODE","ACTION_ID",
        "CREATEDAT","CREATEDBY","REQUESTTYPE","ADDITIONALINFO","CREATEDBYUSER")
        SELECT "LOGGER".NEXTVAL,"EXTERNALCODE",
                lc_log_posting,CURRENT_UTCTIMESTAMP,"MODIFIEDBY","REQUESTTYPE",iv_additionalInfo,"CREATEDBYUSER"
                FROM :it_req_flow;
END IF;

END